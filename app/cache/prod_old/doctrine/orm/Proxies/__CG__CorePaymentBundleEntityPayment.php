<?php

namespace Proxies\__CG__\Core\PaymentBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Payment extends \Core\PaymentBundle\Entity\Payment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'id', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'createdAt', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'updatedAt', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'passedAt', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'type', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'amount', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'log', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'system', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'customer', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'isPassed', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'userData', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'order', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'isRefund', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'reasonRefund', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'amountRefund', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'parentFromWhichRefund', 'noteRu', 'noteEn');
        }

        return array('__isInitialized__', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'id', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'createdAt', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'updatedAt', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'passedAt', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'type', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'amount', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'log', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'system', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'customer', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'isPassed', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'userData', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'order', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'isRefund', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'reasonRefund', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'amountRefund', '' . "\0" . 'Core\\PaymentBundle\\Entity\\Payment' . "\0" . 'parentFromWhichRefund', 'noteRu', 'noteEn');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Payment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassedAt', array());

        return parent::getPassedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassedAt($passedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassedAt', array($passedAt));

        return parent::setPassedAt($passedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', array());

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', array($amount));

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getSystem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystem', array());

        return parent::getSystem();
    }

    /**
     * {@inheritDoc}
     */
    public function setSystem($system)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSystem', array($system));

        return parent::setSystem($system);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', array());

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\Application\Sonata\UserBundle\Entity\CommonContragent $customer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', array($customer));

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function getLog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLog', array());

        return parent::getLog();
    }

    /**
     * {@inheritDoc}
     */
    public function setLog($log)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLog', array($log));

        return parent::setLog($log);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPassed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPassed', array());

        return parent::getIsPassed();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPassed($isPassed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPassed', array($isPassed));

        return parent::setIsPassed($isPassed);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserData', array());

        return parent::getUserData();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserData($userData)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserData', array($userData));

        return parent::setUserData($userData);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrder', array());

        return parent::getOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrder($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrder', array($order));

        return parent::setOrder($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsRefund()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsRefund', array());

        return parent::getIsRefund();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsRefund($isRefund)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsRefund', array($isRefund));

        return parent::setIsRefund($isRefund);
    }

    /**
     * {@inheritDoc}
     */
    public function getReasonRefund()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReasonRefund', array());

        return parent::getReasonRefund();
    }

    /**
     * {@inheritDoc}
     */
    public function setReasonRefund($reasonRefund)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReasonRefund', array($reasonRefund));

        return parent::setReasonRefund($reasonRefund);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmountRefund()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmountRefund', array());

        return parent::getAmountRefund();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmountRefund($amountRefund)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmountRefund', array($amountRefund));

        return parent::setAmountRefund($amountRefund);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentFromWhichRefund()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentFromWhichRefund', array());

        return parent::getParentFromWhichRefund();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentFromWhichRefund($parentFromWhichRefund)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentFromWhichRefund', array($parentFromWhichRefund));

        return parent::setParentFromWhichRefund($parentFromWhichRefund);
    }

    /**
     * {@inheritDoc}
     */
    public function getNoteRu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNoteRu', array());

        return parent::getNoteRu();
    }

    /**
     * {@inheritDoc}
     */
    public function getNoteEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNoteEn', array());

        return parent::getNoteEn();
    }

    /**
     * {@inheritDoc}
     */
    public function setNoteRu($noteRu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNoteRu', array($noteRu));

        return parent::setNoteRu($noteRu);
    }

    /**
     * {@inheritDoc}
     */
    public function setNoteEn($noteEn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNoteEn', array($noteEn));

        return parent::setNoteEn($noteEn);
    }

}
