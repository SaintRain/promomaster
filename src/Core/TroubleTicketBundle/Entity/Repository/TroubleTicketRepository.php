<?php

namespace Core\TroubleTicketBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Application\Sonata\UserBundle\Entity\User;

/**
 * TroubleTicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TroubleTicketRepository extends EntityRepository {

    /**
     * Поиск для админки 
     * @param integer $id
     * @return array
     */
    public function findWithAllData($id) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('t, mes, l, u1'/* , mes1, u, u3, u2' */)
                ->leftJoin('t.logs', 'l')
                ->leftJoin('l.message', 'mes')
                ->leftJoin('l.manager', 'u1')
                //->leftJoin('t.order', 'o')
                //->leftJoin('t.manager', 'u2')
                //->leftJoin('t.user', 'u3')
                //->leftJoin('t.messages', 'mes1')
                //->leftJoin('t.watchers', 'u')
                //->leftJoin('t.file', 'f')
                ->where('t.id = :id')
                ->orderBy('l.id', 'DESC')
                ->setParameter(':id', $id);
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    /**
     * @param string $hash - хеш 
     * @return Core\TroubleTicketBundle\Entity\TroubleTicket
     */
    public function findByHash($hash) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('t, mes, l, u, s')
                ->leftJoin('t.status', 's')
                ->leftJoin('t.logs', 'l')
                ->leftJoin('l.message', 'mes')
                ->leftJoin('l.manager', 'u')
                ->where('t.hash = :hash')
                ->orderBy('l.id', 'ASC')
                ->setParameter(':hash', $hash);

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    /**
     * Поиск тикетов по email (хеш версия)
     * @param string $owner - hash ссылка на оcновании email
     * @return array
     */
    public function findByOwner($owner) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('partial t.{id, title, body, adminAnswers, createdDateTime, hash}, partial s.{id, sysName}')
                //->leftJoin('t.logs', 'l')
                //->leftJoin('l.message', 'mes')
                ->leftJoin('t.status', 's')
                ->where('t.owner = :owner')
                ->orderBy('t.updatedDateTimeByManager DESC, t.id', 'DESC')
                ->setParameter(':owner', $owner);

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    /**
     * Поиск не активных тикетов
     * @param string $date - отформатированная дата
     * @return array
     */
    public function findOutDated($date) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('t,s')
                ->leftJoin('t.status', 's')
                ->where('t.isAdminAnswer = :isAdminAnswer')
                ->andWhere($qb->expr()->lte('t.updatedDateTime', ':updatedDateTime'))
                ->andWhere($qb->expr()->not($qb->expr()->eq('s.isEnabled', ':isEnabled')))
                ->setParameter(':isAdminAnswer', 0)
                ->setParameter(':updatedDateTime', $date)
                ->setParameter(':isEnabled', 0);

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    /**
     * Поиск не просмотренных но отвеченных анкет для пользователя
     * @param  object $user
     * @return array
     */
    public function findNotWatched($user) {
        $qb = $this->createQueryBuilder('t');
        $qb->select('count(t.id) as total')
                ->where('t.user = :user')
                ->andWhere($qb->expr()->not($qb->expr()->eq('t.adminAnswers', ':adminAnswers')))
                ->setParameter(':user', $user)
                ->setParameter(':adminAnswers', 0);
        $result = $qb->getQuery()->getSingleResult();

        return $result;
    }

    /**
     * Ищет количество поступивших тикетов разбивкой по времени
     * @return type
     */
    public function getGeneralStatistics() {

        $start_dateTime_7 = date('Y-m-d H:i:s', time() - 7 * 86400); //7 суток назад
        $start_dateTime_1 = date('Y-m-d H:i:s', time() - 1 * 86400); //сутки назад

        $res = $this->createQueryBuilder('t')
                        ->select('COUNT(t) AS troubletickets_total')
                        ->addSelect('SUM(CASE WHEN s.sysName = :status THEN 1 ELSE 0 END) AS troubletickets_total_closed')
                        ->addSelect('SUM(CASE WHEN t.createdDateTime > :start_dateTime_7 THEN 1 ELSE 0 END) AS troubletickets_total_by_period_7')
                        ->addSelect('SUM(CASE WHEN t.createdDateTime > :start_dateTime_1 THEN 1 ELSE 0 END) AS troubletickets_total_by_period_1')
                        ->setParameters([
                            'start_dateTime_7' => $start_dateTime_7,
                            'start_dateTime_1' => $start_dateTime_1,
                            'status' => 'zakryto'])
                        ->leftJoin('t.status', 's')

                        //zakryto
                        ->getQuery()->getOneOrNullResult();

        return $res;
    }

    /**
     * Подстчет общего кол-ва новых ответов от админа пользователю
     * @param \Application\Sonata\UserBundle\Entity\User $user
     * @return type
     */
    public function getNotification(User $user)
    {
        $qb = $this->createQueryBuilder('t');

        $qb->select('SUM(t.adminAnswers) AS ticketNotification')
           ->leftJoin('t.user', 'u')
           ->where('u.id = :userId')
           ->orWhere('t.authorEmail = :authorEmail');

        $qb->setParameter('userId', $user->getId())
           ->setParameter('authorEmail', $user->getEmail());

        //$result = $qb->getQuery()->getSingleScalarResult();
        $result= $qb->getQuery()->useResultCache(true, 10)->getSingleScalarResult();
        
        return $result;
    }

    /**
     * Поиск для авторизованного пользователя 
     * @param \Application\Sonata\UserBundle\Entity\User $user
     * @return type
     */
    public function findByAuthUser(User $user)
    {
        $qb = $this->createQueryBuilder('t');

        $qb->select('partial t.{id, title, body, adminAnswers, createdDateTime, hash}, partial s.{id, sysName}')
           ->leftJoin('t.user', 'u')
           ->leftJoin('t.status', 's')
           ->where('u.id = :userId')
           ->orWhere('t.authorEmail = :authorEmail')
           ->orderBy('t.updatedDateTimeByManager DESC, t.id', 'DESC')
        ;

        $qb->setParameter('userId', $user->getId())
           ->setParameter('authorEmail', $user->getEmail());

        $result= $qb->getQuery()->getResult();
        
        return $result;
    }
}
