services:
  #админсике классы для продукции
  core_shop_product_admin:
    class: Core\ProductBundle\Admin\ProductAdmin
    tags:
    - { name: sonata.admin, manager_type: orm, audit: true, label_translator_strategy: sonata.admin.label.strategy.underscore,  group: Продукция, label: Продукция }
    arguments: [core_shop_product_admin, Core\ProductBundle\Entity\CommonProduct, "CoreProductBundle:Admin\AdminProduct"]
    calls:
    - [ setSubClasses, [ { "Физический продукт": Core\ProductBundle\Entity\Product, "Цифровой продукт": Core\ProductBundle\Entity\DigitalProduct, "Составной продукт": Core\ProductBundle\Entity\CompositeProduct, "Услуга": Core\ProductBundle\Entity\ServiceProduct} ] ]

  #тип формы для редактирования модификаций
  core_shop_modification_form_type:
    class: Core\ProductBundle\Admin\Form\Type\ProductModificationsType
    tags:
        - { name: form.type, alias: product_modifications }
    arguments: ['@core_product_modification_logic']

  #тип формы для выбора главной категории
  core_shop_category_main_form_type:
    class: Core\ProductBundle\Admin\Form\Type\CategoryMainType
    tags:
        - { name: form.type, alias: category_main }

#тип формы для выбора главной категории
  core_shop_manufacturer_main_form_type:
    class: Core\ProductBundle\Admin\Form\Type\ManufacturerMainType
    tags:
        - { name: form.type, alias: manufacturer_main }

  # логика для модификаций продукта
  core_product_modification_logic:
    class: Core\ProductBundle\Logic\ProductModificationLogic
    arguments: ['@doctrine.orm.entity_manager',  '@validator', '@templating', '@core_file_logic']

  # логика для составного продукта
  core_composite_product_logic:
    class: Core\ProductBundle\Logic\CompositeProductLogic
    arguments: ['@doctrine.orm.entity_manager']

  # подписчик событий
  core_product_subscriber:
    class: Core\ProductBundle\EventListener\ProductSubscriber
    tags:
            - { name: doctrine.event_subscriber }
    arguments: ['@service_container']


  # расширения для восстановления галочек, если форма сломалась для модификаций
  checked_modification.twig.extension:
     class: Core\ProductBundle\Twig\CheckedModificationRowExtension
     arguments: ['@service_container']
     tags:
      - { name: twig.extension }

# Разширения для Twig
  core_product_format_twig_extension:
    class: Core\ProductBundle\Twig\FormatExtension
    tags:
      - { name: twig.extension }
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
    arguments: ['%locale%', '@service_container']

  core_product_twig_extension:
    class: Core\ProductBundle\Twig\ProductExtension
    tags:
      - { name: twig.extension }
    arguments: ['@service_container']

# Сервис для продукции
  core_product_logic:
    class: Core\ProductBundle\Logic\ProductLogic
    tags:
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
    arguments: ['@templating', '%locale%', '@session', '@router', '@translator', '@service_container', '@mailer', {'default_email_sender_name': %default_email_sender_name%, 'default_email': %default_email% , 'default_timezone': %default_timezone%}]


#логика для работы с YanedxAPI    
  core_yandex_api_logic:
    class: Core\ProductBundle\Logic\YandexAPILogic
    arguments: ['@templating', '@doctrine.orm.entity_manager', '@core_config_logic', {'domain_ru': %domain_ru%}]
    
    
    