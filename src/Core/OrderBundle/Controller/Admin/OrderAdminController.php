<?php

/**
 * Админски контроллер для заказов
 *
 * @author  Sergeev A.M.
 * @copyright LLC "PromoMaster"
 */

namespace Core\OrderBundle\Controller\Admin;

use Sonata\AdminBundle\Controller\CRUDController as Controller;
use Symfony\Component\Form\FormError;
use Symfony\Component\Intl\Intl;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Core\OrderBundle\Entity\Order;
use Core\DeliveryBundle\Entity\ServiceWithAddress;
use Core\DeliveryBundle\Entity\ServiceInCity;

class OrderAdminController extends Controller
{

    /**
     * накладные на доставку заказов
     * @param \Sonata\AdminBundle\Datagrid\ProxyQueryInterface $query
     * @return type
     */
    public function batchActionGenerateDelliveryWaybills(ProxyQueryInterface $query)
    {

        $selectedModels = $query
                        ->select($query->getRootAlias() . ', dm, seller, deliveryCity')
                        ->leftJoin($query->getRootAlias() . '.deliveryMethod', 'dm')
                        ->leftJoin($query->getRootAlias() . '.seller', 'seller')
                        ->leftJoin($query->getRootAlias() . '.deliveryCity', 'deliveryCity')
                        ->getQuery()->execute();

        return $this->container->get('core_order_logic')->batchGenerateDelliveryWaybills($selectedModels);
    }

    /**
     *  отчет по товарам
     * @param \Sonata\AdminBundle\Datagrid\ProxyQueryInterface $query
     * @return type
     */
    public function batchActionGenerateReportForProducts(ProxyQueryInterface $query)
    {
        $selectedModels = $query->execute();
        return $this->container->get('core_order_logic')->batchGenerateReportForProducts($selectedModels);
    }

    public function editAction($id = null)
    {
        // the key used to lookup the template
        $templateKey = 'edit';

        $id = $this->get('request')->get($this->admin->getIdParameter());
        $object = $this->admin->getObject($id);

        if (!$object) {
            throw new NotFoundHttpException(sprintf('unable to find the object with id : %s', $id));
        }

        if (false === $this->admin->isGranted('EDIT', $object)) {
            throw new AccessDeniedException();
        }

        if ($this->getRestMethod() != 'POST') {
            //вычисляем и проставляем полную стоимость
            $costInfo = $this->container->get('core_order_logic')->setCompositionsCost($object);
        }
        $this->admin->setSubject($object);

        /** @var $form \Symfony\Component\Form\Form */
        $form = $this->admin->getForm();
        $form->setData($object);

        if ($this->getRestMethod() == 'POST') {
            $form->bind($this->get('request'));

            //вычисляем и проставляем полную стоимость
            $costInfo = $this->container->get('core_order_logic')->setCompositionsCost($object);

            $isFormValid = $form->isValid();
            // persist if the form was valid and if in preview mode the preview was approved
            if ($isFormValid && (!$this->isInPreviewMode() || $this->isPreviewApproved())) {
                if ($object->getIsShippedStatus() && $object->getExtraStatus() && $object->getExtraStatus()->getName() == 'executed') {
                    $object->setExecutedDateTime(new \DateTime('now'));
                }
                // Создание платежа по удержке средств при отмене заказа
                $this->get('core_order_logic')->createPaymentOnCanceling($object);

                // отправляем письмо пользователю о том что для него создана накладная
                if ($object->getDeliveryMethod() && $object->getRecipientEmail() && !($object->getDeliveryMethod() instanceof ServiceWithAddress || $object->getDeliveryMethod() instanceof ServiceInCity)) {
                    $this->get('core_order_logic')->createNotificationMsg(array(
                                                    'orderId' => $object->getId(),
                                                    'helloPrefix' => ($object->getRecipientFio())  ? $object->getRecipientFio() : $object->getRecipientCompany(),
                                                    'userEmail' => $object->getRecipientEmail(),
                                                    ), $object->getWaybills(), $object->getDeliveryMethod()->getCompany(), 'notificate-waybill-create');
                    
                }
                
                // отменяем заказы для траспортной компании
                if ($object->getIsCanceledStatus()) {
                    $em = $this->getDoctrine()->getManager();
                    foreach ($object->getWaybills() as $waybill) {
                        if ($waybill->getIsAutoGenerated()) {
                            $data = array('orderId' => $object->getId(),
                                'sellerId' => $waybill->getSalesMan()->getId(),
                                'deliveryMethodId' => $waybill->getDeliveryMode()->getId(),
                                'waybillId' => $waybill->getNumber(),
                                'date' => $waybill->getDateTime()->format('Y-m-d H:i:s')
                            );
                            $result = $this->get('core_delivery')->configurate($data)->cancelOrder();
                        }
                        $em->remove($waybill);
                    }
                    $em->flush();

                    //если переоформление, то сбрасываем отмену, чтобы потом всободно можно было редактировать заказ
                    if ($object->getReasonForCanceling()->getName() == Order::reorderCanceledReasonName) {
                        $object->setIsCanceledStatus(false);
                    }
                }

                $this->admin->update($object);

                if ($this->isXmlHttpRequest()) {
                    return $this->renderJson(array(
                                'result' => 'ok',
                                'objectId' => $this->admin->getNormalizedIdentifier($object)
                    ));
                }

                $this->addFlash('sonata_flash_success', $this->admin->trans('flash_edit_success', array('%name%' => $this->admin->toString($object)), 'SonataAdminBundle'));

                // redirect to edit mode
                return $this->redirectTo($object);
            }

            // show an error message if the form failed validation
            if (!$isFormValid) {
                if (!$this->isXmlHttpRequest()) {
                    $this->addFlash('sonata_flash_error', $this->admin->trans('flash_edit_error', array('%name%' => $this->admin->toString($object)), 'SonataAdminBundle'));
                }
            } elseif ($this->isPreviewRequested()) {
                // enable the preview template if the form was valid and preview was requested
                $templateKey = 'preview';
                $this->admin->getShow();
            }
        }

        $object->costInfo = $costInfo;

        $view = $form->createView();

        // set the theme for the current Admin Form
        $this->get('twig')->getExtension('form')->renderer->setTheme($view, $this->admin->getFormTheme());

        $defaultValuteSymbol = Intl::getCurrencyBundle()->getCurrencySymbol($this->container->getParameter('default_currency'), 'ru');

        return $this->render($this->admin->getTemplate($templateKey), array(
                    'action' => 'edit',
                    'form' => $view,
                    'object' => $object,
        ));
    }

    public function createAction()
    {
        // the key used to lookup the template
        $templateKey = 'edit';

        if (false === $this->admin->isGranted('CREATE')) {
            throw new AccessDeniedException();
        }

        $object = $this->admin->getNewInstance();

        if ($this->getRestMethod() != 'POST') {
            //вычисляем и проставляем полную стоимость
            $costInfo = $this->container->get('core_order_logic')->setCompositionsCost($object);
        }

        $this->admin->setSubject($object);


        /** @var $form \Symfony\Component\Form\Form */
        $form = $this->admin->getForm();
        $form->setData($object);

        if ($this->getRestMethod() == 'POST') {
            $form->bind($this->get('request'));
            //вычисляем и проставляем полную стоимость
            $costInfo = $this->container->get('core_order_logic')->setCompositionsCost($object);

            $isFormValid = $form->isValid();

            // persist if the form was valid and if in preview mode the preview was approved
            if ($isFormValid && (!$this->isInPreviewMode() || $this->isPreviewApproved())) {
               
                $this->admin->create($object);

                if ($this->isXmlHttpRequest()) {
                    return $this->renderJson(array(
                                'result' => 'ok',
                                'objectId' => $this->admin->getNormalizedIdentifier($object)
                    ));
                }

                $this->addFlash('sonata_flash_success', $this->admin->trans('flash_create_success', array('%name%' => $this->admin->toString($object)), 'SonataAdminBundle'));

                // redirect to edit mode
                return $this->redirectTo($object);
            }

            // show an error message if the form failed validation
            if (!$isFormValid) {
                if (!$this->isXmlHttpRequest()) {
                    $this->addFlash('sonata_flash_error', $this->admin->trans('flash_create_error', array('%name%' => $this->admin->toString($object)), 'SonataAdminBundle'));
                }
            } elseif ($this->isPreviewRequested()) {
                // pick the preview template if the form was valid and preview was requested
                $templateKey = 'preview';
                $this->admin->getShow();
            }
        }

        $object->costInfo = $costInfo;

        $view = $form->createView();

        // set the theme for the current Admin Form
        $this->get('twig')->getExtension('form')->renderer->setTheme($view, $this->admin->getFormTheme());

        return $this->render($this->admin->getTemplate($templateKey), array(
                    'action' => 'create',
                    'form' => $view,
                    'object' => $object
        ));
    }

}
