<?php

/**
 * Транспортные накладные для заказа
 * @author  Sergeev A.M.
 * @copyright LLC "PromoMaster"
 */

namespace Core\OrderBundle\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\ExecutionContextInterface;
use Core\DeliveryBundle\Entity\Service;
use Core\LogisticsBundle\Entity\Seller;
use Core\DirectoryBundle\Entity\City;

/**
 * @ORM\Table(name="core_order_waybills")
 * @ORM\Entity(repositoryClass="Core\OrderBundle\Entity\Repository\WaybillsRepository")
 * @Assert\Callback(methods={"isValid"})
 */
class Waybills {

    /**
     * Первичный ключ
     * @var int
     * @ORM\Column(name="id", type="bigint")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * Номер накладной
     * @var string
     * @ORM\Column(type="string", length=100, nullable=true)
     */
    private $number;

    /**
     * Дата
     * @var \DateTime
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     */
    private $dateTime;

    /**
     * Ожидаемая дата
     * @var \DateTime
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     */
    private $expectedDate;

    /**
     * Цена
     * @var decimal
     * @ORM\Column(type="decimal", scale=2, nullable=true)
     */
    private $price;

    /**
     * Заказ
     * @ORM\ManyToOne(targetEntity="Order", cascade={"persist"}, inversedBy="waybills")
     * @ORM\JoinColumn(referencedColumnName="id", onDelete="CASCADE")
     */
    private $order;

    /**
     * Индекс позиции сортировки
     * @var int
     * @ORM\Column(type="bigint", nullable=true)
     */
    private $indexPosition;

    /**
     * Габариты упаковок
     * @ORM\OneToMany(targetEntity="SizesOfBox", cascade={"persist"},  mappedBy="waybill", orphanRemoval=true)
     * @ORM\OrderBy({"indexPosition"="ASC"})
     */
    private $sizesOfBox;

    /**
     * Накладная сгенерирована автоматически
     * @var type
     * @ORM\Column(type="boolean", nullable=true)
     */
    private $isAutoGenerated = false;

    /**
     * Передан в службу доставки
     * @var type
     * @ORM\Column(type="boolean")
     */
    private $isSent = false;

    /**
     * Доставляется
     * @var type
     * @ORM\Column(type="boolean")
     */
    private $isInProccess = false;

    /**
     * Готов к выдаче
     * @var type
     * @ORM\Column(type="boolean")
     */
    private $isReadyToIssue = false;

    /**
     * Товара по накладной выдан (исполнен)
     * @var boolean
     * @ORM\Column(type="boolean")
     */
    private $isDone = false;

    /**
     * Продавец
     * @ORM\ManyToOne(targetEntity="Core\LogisticsBundle\Entity\Seller", cascade={"persist"}, inversedBy="waybills")
     * @ORM\JoinColumn(referencedColumnName="id", onDelete="CASCADE")
     * @var Core\LogisticsBundle\Entity\Seller
     */
    private $salesMan;

    /**
     * Метод доставки
     * @ORM\ManyToOne(targetEntity="Core\DeliveryBundle\Entity\Service", cascade={"persist"}, inversedBy="waybills")
     * @ORM\JoinColumn(referencedColumnName="id", onDelete="CASCADE")
     * @var Core\DeliveryBundle\Entity\Service
     */
    private $deliveryMode;

    /**
     * Город доставки
     * @ORM\ManyToOne(targetEntity="Core\DirectoryBundle\Entity\City", cascade={"persist"})
     * @ORM\JoinColumn(referencedColumnName="id", onDelete="CASCADE", nullable=true)
     * @var Core\DirectoryBundle\Entity\City
     */
    private $deliveryCity;
    
    public function __construct()
    {
        $this->sizesOfBox = new ArrayCollection();
    }

    public function getId() {
        return $this->id;
    }

    public function getNumber() {
        return $this->number;
    }

    public function setNumber($number) {
        $this->number = $number;
        return $this;
    }

    public function getDateTime() {
        return $this->dateTime;
    }

    public function setDateTime($dateTime) {

        $this->dateTime = $dateTime; // new \DateTime
        return $this;
    }

    public function getExpectedDate() {
        return $this->expectedDate;
    }

    public function setExpectedDate($expectedDate) {
        $this->expectedDate = $expectedDate;
        return $this;
    }

    public function getPrice() {
        return $this->price;
    }

    public function setPrice($price) {
        $this->price = $price;
        return $this;
    }

    public function getOrder() {
        return $this->order;
    }

    public function setOrder(Order $order = null) {
        $this->order = $order;
        return $this;
    }

    public function getIndexPosition() {
        return $this->indexPosition;
    }

    public function setIndexPosition($indexPosition) {
        $this->indexPosition = $indexPosition;
        return $this;
    }

    // коробки
    public function getSizesOfBox() {
        return $this->sizesOfBox;
    }

    public function setSizesOfBox($sizesOfBox) {
        $this->sizesOfBox = $sizesOfBox;
        return $this;
    }

    public function addSizesOfBox(SizesOfBox $sizesOfBox)
    {
        if (!$this->sizesOfBox->contains($sizesOfBox)) {
             $this->sizesOfBox->add($sizesOfBox);
             $sizesOfBox->setWaybill($this);
         }
        return $this;
    }

      public function removeSizesOfBox($sizeOfBox) {
        $this->sizesOfBox->removeElement($sizeOfBox);
        return $this;
    }

    public function getIsSent()
    {
        return $this->isSent;
    }

    public function setIsSent($isSent)
    {
        $this->isSent = $isSent;

        return $this;
    }

    public function getIsInProccess()
    {
        return $this->isInProccess;
    }

    public function setIsInProccess($isInProccess)
    {
        $this->isInProccess = $isInProccess;

        return $this;
    }

    public function getIsReadyToIssue()
    {
        return $this->isReadyToIssue;
    }

    public function setIsReadyToIssue($isReadyToIssue)
    {
        $this->isReadyToIssue = $isReadyToIssue;

        return $this;
    }

    public function getIsAutoGenerated()
    {
        return $this->isAutoGenerated;
    }

    public function setIsAutoGenerated($isAutoGenerated)
    {
        if ($isAutoGenerated != null) {
            $this->isAutoGenerated = $isAutoGenerated;
        }
        return $this;
    }

    public function getIsDone()
    {
        return $this->isDone;
    }

    public function setIsDone($isDone)
    {
        $this->isDone = $isDone;
        
        return $this;
    }

    public function getSalesMan()
    {
        return $this->salesMan;
    }

    public function getDeliveryMode()
    {
        return $this->deliveryMode;
    }

    public function setSalesMan(Seller $salesMan = null)
    {
        $this->salesMan = $salesMan;
        return $this;
    }

    public function setDeliveryMode(Service $deliveryMode = null)
    {
        $this->deliveryMode = $deliveryMode;

        return $this;
    }

    public function getDeliveryCity()
    {
        return $this->deliveryCity;
    }

    public function setDeliveryCity(City $deliveryCity = null)
    {
        $this->deliveryCity = $deliveryCity;
        return $this;
    }

    /**
     * Обновляем статус посылки
     * @param string $status - имя метода
     */
    public function updateStatus($status)
    {
        $getter = 'get' . $status;
        if (method_exists($this, $getter)) {
            if (!$this->getIsInProccess()) {
                $this->setIsInProccess(true);
            }
            
            if ($status == 'isDone' && !$this->getIsReadyToIssue()) {
                $this->setIsReadyToIssue(true);
            }
            $this->setIsDone(true);
        }
    }

    /**
     * Дополнительные проверки
     */
    public function isValid(ExecutionContextInterface $context) {
        if ($this->number && !$this->price) {
            $context->buildViolation('Пожалуйста, укажите цену')
                        ->atPath('price')
                        ->addViolation();
        }
    }

}

