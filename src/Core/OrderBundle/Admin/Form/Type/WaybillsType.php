<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of MessageType
 *
 * @author Sergeev A.M.
 */

namespace Core\OrderBundle\Admin\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormInterface;

class WaybillsType extends AbstractType
{

    /**
     * @todo Каскадная валидация для упаков не отрабатывает
     * @param \Symfony\Component\Form\FormBuilderInterface $builder
     * @param array $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
                ->add('number', null, array(
                    'required' => false,
                    'label' => 'Номер',
                    'attr' => ['data-forbidden-delete' => false, 'class' => 'width:100px']))
                ->add('isAutoGenerated', 'hidden')
            ->add('salesMan', 'entity', array(
                'class' => 'CoreLogisticsBundle:Seller',
                'attr' => array('data-hidden' => true)
            ))
            ->add('deliveryMode', 'entity', array(
                'class' => 'CoreDeliveryBundle:Service',
                'attr' => array('data-hidden' => true)
            ))
            ->add('indexPosition', 'hidden', array('required' => false, 'attr' => array('data-hidden' => true)))
        ;
        $builder->addEventListener(FormEvents::PRE_SET_DATA, function(FormEvent $event) use ($options) {
            $data = $event->getData();
            $form = $event->getForm();
            if ($data) {
                $form->remove('number');
                if ($data->getIsAutoGenerated() || $data->getIsSent()) {
                    $readonly = true;
                } else {
                    $readonly = false;
                }

                $deleteForbidden = !$data->getIsSent();

                $form->add('number', null, array(
                    'required' => false,
                    'label' => 'Номер',
                    'attr' => ['data-forbidden-delete' => $deleteForbidden, 'class' => 'width:100px', 'readonly' => $readonly]))
                ;
            }

            $form->add('dateTime', 'date', array(
                        'required' => false,
                        'label' => 'Дата',
                        'attr' => ['class' => 'datepicker'],
                        'widget' => 'single_text',
                        //'view_timezone' => $options['view_timezone'],
                        'format' => 'dd.MM.yyyy'
                    ))
                    ->add('expectedDate', 'date', array(
                        'required' => false,
                        'label' => 'Ожидаемая дата',
                        'attr' => ['class' => 'datepicker'],
                        'widget' => 'single_text',
                        //'view_timezone' => $options['view_timezone'],
                        'format' => 'dd.MM.yyyy'
                    ))
                    ->add('price', 'money', array(
                        'required' => false,
                        'label' => 'Цена',
                        'attr' => ['data-mask' => 'money']))
                    ->add('isSent', 'checkbox', array(
                        'required' => false,
                        'label' => 'Передан в службу доставки'
                    ))
            ;

            if ($data) {
                $form->remove('isInProccess')
                        ->remove('isReadyToIssue')
                ;
                $form
                        ->add('isInProccess', 'checkbox', array(
                            'attr' => ['readonly' => !$data->getIsSent()],
                            'required' => false,
                            'label' => 'Доставляется'
                        ))
                        ->add('isReadyToIssue', 'checkbox', array(
                            'attr' => ['readonly' => !$data->getIsInProccess()],
                            'required' => false,
                            'label' => 'Готов к выдаче'
                        ))
                        ->add('isDone', 'checkbox', array(
                            'attr' => ['readonly' => !$data->getisReadyToIssue()],
                            'required' => false,
                            'label' => 'Вручен'
                        ))
                ;
            }

            if (!$form->has('isInProccess') && !$form->has('isReadyToIssue') && !$form->has('isDone')) {
                $form
                        ->add('isInProccess', 'checkbox', array(
                            'required' => false,
                            'label' => 'Доставляется',
                            'attr' => ['readonly' => true]
                        ))
                        ->add('isReadyToIssue', 'checkbox', array(
                            'required' => false,
                            'label' => 'Готов к выдаче',
                            'attr' => ['readonly' => true]
                        ))
                        ->add('isDone', 'checkbox', array(
                            'attr' => ['readonly' => true],
                            'required' => false,
                            'label' => 'Вручен'
                        ))
                ;
            }

            $form->add('sizesOfBox', 'collection', array(
                'type' => 'boxes_in_order',
                'by_reference' => false,
                'prototype_name' => '__box__',
                'cascade_validation' => true,
                'allow_add' => true,
                'allow_delete' => true,
                'options' => array(
                    'cascade_validation' => true
                ),
                'required' => true,
                'label' => 'Упаковки')
            )
            ;
        });
    }

    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => 'Core\OrderBundle\Entity\Waybills',
            'cascade_validation' => true,
            'order' => null,
            'view_timezone' => null
        ));
    }

    public function buildView(FormView $view, FormInterface $form, array $options)
    {
        $view->vars['object'] = $options['order'];
        $view->vars['waybill'] = $form->getData();
    }

    public function getName()
    {
        return 'waybills_in_order';
    }

}
