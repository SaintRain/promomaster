<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\Sonata\UserBundle\Entity;

use Sonata\UserBundle\Entity\BaseUser as BaseUser;
use Symfony\Component\Validator\ExecutionContextInterface;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class User extends BaseUser
{

    const SALT = 'olikids';
    const USER_TYPE_WEBMASTER = 0;
    const USER_TYPE_ADVERTISER = 1;
    const USER_TYPE_WEBMASTER_AND_ADVERTISER = 2;

    /**
     * @var integer $id
     */
    protected $id;

    /**
     * @var string $newEmail
     */
    protected $newEmail;

    /**
     *
     * @var string $newEmailHash
     */
    protected $newEmailHash;

    /**
     *
     * @var collection $favoriteProducts ;
     */
//    protected $favoriteProducts;

    /**
     *
     * @var collection $favoriteProducts ;
     */
//    protected $historyProducts;

    /**
     * IP пользователя
     * @var string
     */
    protected $ip;

    /**
     * Подписан ли пользователь на рассылку
     * @var boolean
     */
    protected $isRssNews = false;

    /**
     * Регистрировался через соц сеть
     * @var boolean
     */
    protected $isSocialAuth = false;

    /**
     * Контрагенты пользователя
     * @var collection $contragents ;
     */
    protected $contragents;

    /**
     * Админские комментарии
     * @var collection $contragents ;
     */
    protected $adminComments;

    /**
     * @var collection $contragents ;
     */
    private $subscribersOnAdminComments;

    /**
     * Отзывы
     * @var ArrayCollection $contragents ;
     */
    protected $reviews;

    /**
     * Связь с таблицей лайков
     */
    protected $reviewsLikes;

    /**
     * Логи юзера
     * @var ArrayCollection logs
     */
    protected $logs;

    protected $userStatus = self::USER_TYPE_WEBMASTER_AND_ADVERTISER;

    public function __construct()
    {
        parent::__construct();

//        $this->favoriteProducts = new ArrayCollection();
//        $this->historyProducts = new ArrayCollection();
        $this->contragents = new ArrayCollection();
        $this->adminComments = new ArrayCollection();
        $this->subscribersOnAdminComments = new ArrayCollection();
        $this->reviews = new ArrayCollection();
        $this->reviewsLikes = new ArrayCollection();
        $this->logs = new ArrayCollection();
    }

    /**
     * Примечание
     * @var string
     */
    protected $notation;

    /**
     * Get id
     *
     * @return integer $id
     */
    public function getId()
    {
        return $this->id;
    }

    public function setEmail($email)
    {
        $this->email = $email;
        if (!$this->username) {
            $this->setUsername($email);
        }
    }

    public function getNewEmail()
    {
        return $this->newEmail;
    }

    public function setNewEmail($newEmail)
    {
        $this->newEmail = $newEmail;
        $this->setNewEmailHash();

        return $this;
    }

    public function getNewEmailHash()
    {
        return $this->newEmailHash;
    }

    public function setNewEmailHash($newEmailHash = null)
    {
        if ($newEmailHash) {
            $this->newEmailHash = $newEmailHash;
        } else {
            $this->newEmailHash = md5($this->newEmail . self::SALT);
        }

        return $this;
    }

    public function isEmailAlreadyRequested(ExecutionContextInterface $context)
    {

    }

//    public function getFavoriteProducts()
//    {
//        return $this->favoriteProducts;
//    }
//
//    public function setFavoriteProducts($favoriteProducts)
//    {
//        $this->favoriteProducts = $favoriteProducts;
//        return $this;
//    }
//
//    public function addFavoriteProducts($favoriteProducts)
//    {
////        $favoriteProducts->addFavoriteUsers($this);
//        $this->favoriteProducts->add($favoriteProducts);
//        return $this;
//    }
//
//    public function removeFavoriteProducts($favoriteProducts)
//    {
////        $favoriteProducts->removeFavoriteUsers($this);
//        $this->favoriteProducts->removeElement($favoriteProducts);
//        return $this;
//    }

//    public function getHistoryProducts()
//    {
//        return $this->historyProducts;
//    }
//
//    public function setHistoryProducts($historyProducts)
//    {
//        $this->historyProducts = $historyProducts;
//        return $this;
//    }
//
//    public function addHistoryProducts($historyProducts)
//    {
//        $this->historyProducts->add($historyProducts);
//        return $this;
//    }
//
//    public function removeHistoryProducts($historyProducts)
//    {
//        $this->historyProducts->removeElement($historyProducts);
//        return $this;
//    }

    public function getIp()
    {
        return $this->ip;
    }

    public function setIp($ip)
    {
        $this->ip = $ip;

        return $this;
    }

    public function getIsRssNews()
    {
        return $this->isRssNews;
    }

    public function setIsRssNews($isRssNews)
    {
        $this->isRssNews = $isRssNews;

        return $this;
    }

    public function getIsSocialAuth()
    {
        return $this->isSocialAuth;
    }

    public function setIsSocialAuth($isSocialAuth)
    {
        $this->isSocialAuth = $isSocialAuth;

        return $this;
    }

    public function getContragents()
    {
        return $this->contragents;
    }

    public function setContragents($contragents)
    {
        $this->contragents = $contragents;
        return $this;
    }

    public function addContragent($contragent)
    {
        if (!$this->contragents->contains($contragent)) {
            $contragent->setUser($this);
            $this->contragents->add($contragent);
        }
        return $this;
    }

    public function removeContragent($contragent)
    {
        $this->contragents->removeElement($contragent);
        return $this;
    }

    public function getNotation()
    {
        return $this->notation;
    }

    public function setNotation($notation)
    {
        $this->notation = $notation;

        return $this;
    }

    public function getAdminComments()
    {
        return $this->adminComments;
    }

    public function setAdminComments($adminComments)
    {
        $this->adminComments = $adminComments;
        return $this;
    }

    public function addAdminComments($adminComments)
    {
        $this->adminComments->add($adminComments);
        return $this;
    }

    public function removeAdminComments($adminComments)
    {
        $this->adminComments->removeElement($adminComments);
        return $this;
    }

    public function getSubscribersOnAdminComments()
    {
        return $this->subscribersOnAdminComments;
    }

    public function setSubscribersOnAdminComments($subscribersOnAdminComments)
    {
        $this->subscribersOnAdminComments = $subscribersOnAdminComments;
        return $this;
    }

    public function addSubscribersOnAdminComments($subscribersOnAdminComments)
    {
        $this->subscribersOnAdminComments->add($subscribersOnAdminComments);
        return $this;
    }

    public function removeSubscribersOnAdminComments($subscribersOnAdminComments)
    {
        $this->subscribersOnAdminComments->removeElement($subscribersOnAdminComments);
        return $this;
    }

    public function getReviews()
    {
        return $this->reviews;
    }

    public function setReviews($reviews)
    {
        $this->reviews = $reviews;
        return $this;
    }

    public function addReview($review)
    {
        $this->reviews->add($review);
        return $this;
    }

    public function removeReview($review)
    {
        $this->reviews->removeElement($review);
        return $this;
    }

    public function setReviewsLikes($reviewsLikes)
    {
        $this->reviewsLikes = $reviewsLikes;
        return $this;
    }

    public function getReviewsLikes()
    {
        return $this->reviewsLikes;
    }

    public function addReviewsLikes($reviewsLikes)
    {
        $this->reviewsLikes->add($reviewsLikes);
        return $this;
    }

    public function removeReviewsLikes($reviewsLikes)
    {
        $this->reviewsLikes->removeElement($reviewsLikes);
        return $this;
    }

    public function getLogs()
    {
        return $this->logs;
    }

    public function setLogs(ArrayCollection $logs)
    {
        $this->logs = $logs;
        return $this;
    }

    public function addLog(UserLog $userLog)
    {
        if (!$this->logs->contains($userLog)) {
            $this->logs->add($userLog);
            $userLog->setUser($this);
        }

        return $this;
    }

    public function removeLog(UserLog $userLog)
    {
        $this->logs->removeElement($userLog);

        return $this;
    }

    public function getCaption()
    {
        $caption = $this->email . ' ' . $this->lastname . ' ' . $this->firstname;
        return $caption;
    }

    /**
     * @return mixed
     */
    public function getUserStatus()
    {
        return $this->userStatus;
    }

    /**
     * @param mixed $userStatus
     */
    public function setUserStatus($userStatus)
    {
        $this->userStatus = $userStatus;
    }


    public function getFullname()
    {
        return trim(sprintf("%s %s", $this->getLastname(), $this->getFirstname()));
    }

}
