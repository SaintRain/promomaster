<?php

/**
 * Репозиторий для работы с сущностью IndiContragent
 *
 * @author  Sergeev A.M.
 * @copyright LLC "PromoMaster"
 */

namespace Application\Sonata\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * IndiContragentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IndiContragentRepository extends EntityRepository
{
    /**
     * Контрагент со всеми адресатами
     * @param int $id
     * @return type
     */
    public function findWithContact($id)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c, contact, city, country')
           ->leftJoin('c.contactList', 'contact')
           ->leftJoin('contact.city', 'city')
           ->leftJoin('city.country', 'country')
           ->where('c.id = :id')
        ;
        $qb->setParameter('id', $id);

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }
    
    /**
     * Поиск контрагент по ФИО
     * @param array $data - поля для поиска
     * @param integer $userId - id пользователя
     * @return type
     */
    public function findByFullName($data, $userId)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c, contactList')
            ->join('c.user', 'user')
            ->leftJoin('c.contactList', 'contactList')
        ;
        $i = 0;
        foreach($data as $key => $val) {
            $where = 'c.'.$key . ' = :' .$key;
            if ($i == 0) {
                $qb->where($where)->setParameter(':' . $key, $val);
            } else {
                $qb->andWhere($where)->setParameter(':' . $key, $val);
            }
            $i++;
        }
        
        $qb->andWhere('user.id = :userId')->setParameter('userId', $userId);

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    /**
     * Контрагент с контактом (только необходимые поля)
     * @param type $id
     * @return type
     */
    public function findOnePartialWithContact($id)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('partial c.{id, contactEmail, phone1, firstName, lastName, surName}, '
            . 'partial contact.{id, address, firstName, lastName, surName}, partial city.{id, name}')
           ->leftJoin('c.contactList', 'contact')
           ->leftJoin('contact.city', 'city')
           //->leftJoin('city.country', 'country')
           ->where('c.id = :id')
        ;
        $qb->setParameter('id', $id);

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

}
